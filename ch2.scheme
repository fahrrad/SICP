(define nil null)

(cons 1 nil)
(define one-to-four (list 1 2 3 4))
(car one-to-four)

(null? nil)


(define (list-ref xs n)
  (if (= n 0) (car xs)
      (list-ref (cdr xs) (- n 1))))


(define (length xs)
  (define (length-helper xs c)
    (if (null? xs) c
	(length- (cdr xs) (+ 1 c))))
  (length-helper xs 0))


(define (cons x y)
  (define (dispatch m)
    (cond ((= m 0) x)
	  ((= m 1) y)
	  (else (error "Argument not 0 or 1: CONS" m))))
  dispatch)

(define (car z) (z 0))
(define (cdr z) (z 1))

